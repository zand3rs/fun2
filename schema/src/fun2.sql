CREATE TABLE "SIM_ACTIVATION"
   (    "ID" NUMBER NOT NULL ENABLE,
        "MSISDN" VARCHAR2(12) NOT NULL ENABLE,
        "COUNTRY" VARCHAR2(30),
        "SUBSCRIBER_NAME" VARCHAR2(60),
        "NAME_OF_REQ_PARTY" VARCHAR2(60),
        "ACTIVATION_METHOD" VARCHAR2(30),
        "ACTIVATION_DT" DATE,
        "REACTIVATION_DT" DATE,
        "ACTIVATION_PERIOD_FR" DATE,
        "ACTIVATION_PERIOD_TO" DATE,
        "REGISTRATION_DT" DATE,
        "CONFIRMATION_DT" DATE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "DEACTIVATION_DT" DATE,
        "DEACTIVATION_REASON" VARCHAR2(128),
        "EXPIRY_NOTIFY_DATE" DATE,
        "CS_USERNAME" VARCHAR2(30),
        "BALANCE_THRESHOLD" NUMBER,
        "FUN_CUSTOMER_TYPE" VARCHAR2(16) NOT NULL ENABLE,
        "FUN_ACTIVATION_DT" DATE,
        "FUN_DEACTIVATION_DT" DATE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "SIM_ACT_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "SIM_ACT_UK" UNIQUE ("MSISDN"),
         CONSTRAINT "SIM_ACTIVATION_COUNTRY_FK" FOREIGN KEY ("COUNTRY")
          REFERENCES "COUNTRIES" ("COUNTRY_CODE") ENABLE,
         CONSTRAINT "SIM_ACTIVATION_CUSTOMER_FK" FOREIGN KEY ("FUN_CUSTOMER_TYPE")
          REFERENCES "FUN_CUSTOMER_TYPES" ("CUSTOMER_TYPE") ENABLE
   );


CREATE SEQUENCE  "SIM_ACTIVATION_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "SIM_SERVICES"
   (    "ID" NUMBER NOT NULL ENABLE,
        "MSISDN" VARCHAR2(12) NOT NULL ENABLE,
        "SERVICE_CODE" VARCHAR2(30) NOT NULL ENABLE,
        "ACTIVATION_DT" DATE,
        "DEACTIVATION_DT" DATE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
         CONSTRAINT "SIM_SERVICES_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "SIM_SERVICES_UK" UNIQUE ("MSISDN")
   );


CREATE SEQUENCE  "SIM_SERVICES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "BLACKLISTED_LOG"
   (    "MSISDN" VARCHAR2(12) NOT NULL ENABLE,
        "DT_CREATED" VARCHAR2(12) NOT NULL ENABLE,
         CONSTRAINT "BLISTED_LOG_PK" PRIMARY KEY ("MSISDN")
   );


CREATE TABLE "WHITELISTED_LOG"
   (    "MSISDN" VARCHAR2(12) NOT NULL ENABLE,
        "DT_CREATED" VARCHAR2(12) NOT NULL ENABLE,
         CONSTRAINT "WLISTED_LOG_PK" PRIMARY KEY ("MSISDN")
   );


CREATE TABLE "TRANSACTION_LOG"
   (    "ID" NUMBER NOT NULL ENABLE,
        "REF_ID" NUMBER NOT NULL ENABLE,
        "GSMNUM" VARCHAR2(12) NOT NULL ENABLE,
        "STEP_NO" NUMBER(4,0) DEFAULT 0 NOT NULL ENABLE,
        "STATUS" NUMBER(4,0) DEFAULT 0 NOT NULL ENABLE,
        "TX_START" DATE NOT NULL ENABLE,
        "TX_END" DATE,
        "TRAN_DT" DATE,
         CONSTRAINT "TX_LOG_PK" PRIMARY KEY ("ID")
   );


CREATE SEQUENCE  "TRANSACTION_LOG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE ORDER  NOCYCLE;


CREATE SEQUENCE  "REQUEST_LOG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE;


CREATE SEQUENCE  "RESPONSE_LOG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "FUN_SIM_ACTIVATION_LINKS"
   (    "ID" NUMBER NOT NULL ENABLE,
        "MSISDN" VARCHAR2(12) NOT NULL ENABLE,
        "LINK_TO" VARCHAR2(12) NOT NULL ENABLE,
        "LINK_TO_TYPE" VARCHAR2(12) NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
         CONSTRAINT "FUN_SIM_LINK_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "FUN_SIM_LINK_UK" UNIQUE ("MSISDN", "LINK_TO")
   );


CREATE SEQUENCE  "FUN_SIM_ACTIVATION_LINKS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "FUN_CUSTOMER_TYPES"
   (    "ID" NUMBER NOT NULL ENABLE,
        "CUSTOMER_TYPE" VARCHAR2(16) NOT NULL ENABLE,
        "DAILY_BALANCE" VARCHAR2(12) NOT NULL ENABLE,
        "MAX_DURATION" NUMBER,
        "MIN_VOICE" NUMBER,
        "SMS_TRESHOLD" NUMBER,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "FUN_CUST_TYPE_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "FUN_CUST_TYPE_UK" UNIQUE ("CUSTOMER_TYPE")
   );


CREATE SEQUENCE  "FUN_CUSTOMER_TYPES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 2 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "SERVICES"
   (    "ID" NUMBER NOT NULL ENABLE,
        "SERVICE_CODE" VARCHAR2(30) NOT NULL ENABLE,
        "SERVICE_DESC" VARCHAR2(60) NOT NULL ENABLE,
        "PRIORITY" NUMBER DEFAULT 9999 NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "SERVICES_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "SERVICES_UK" UNIQUE ("SERVICE_CODE")
   );


CREATE SEQUENCE  "SERVICES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  ORDER NOCYCLE;


CREATE TABLE "MANUAL_ENROLLMENT_LOG"
   (    "ID" NUMBER NOT NULL ENABLE,
        "MSISDN" VARCHAR2(12) NOT NULL ENABLE,
        "ENROLLMENT_TYPE" VARCHAR2(12) NOT NULL ENABLE,
        "BULK_UPLOAD" NUMBER NOT NULL ENABLE,
        "TX_DATE" DATE NOT NULL ENABLE,
        "STATUS" NUMBER DEFAULT 0,
        "CS_USERNAME" VARCHAR2(30),
        "CS_REASON" VARCHAR2(30),
        "DT_CREATED" DATE NOT NULL ENABLE,
        "DT_MODIFIED" DATE,
        "SUBS_NAME" VARCHAR2(60),
        "SUBS_GROUP" VARCHAR2(22),
        "SUBS_CONTACT_NO" VARCHAR2(22),
        "REMARKS" VARCHAR2(255),
        "BULK_GRP_ID" VARCHAR2(30),
        "DURATION" NUMBER,
         CONSTRAINT "MANUAL_ENROLLMENT_LOG_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "MANUAL_ENROLLMENT_LOG_UK" UNIQUE ("MSISDN", "ENROLLMENT_TYPE", "TX_DATE")
   );


CREATE SEQUENCE  "MANUAL_ENROLLMENT_LOG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "KEYWORDS"
   (    "ID" NUMBER NOT NULL ENABLE,
        "KEYWORD" VARCHAR2(30) NOT NULL ENABLE,
        "SUB_KEYWORD" VARCHAR2(30),
        "KEYWORD_DESC" VARCHAR2(60) NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "KEYWORDS_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "KEYWORDS_UK" UNIQUE ("KEYWORD", "SUB_KEYWORD")
   );


CREATE SEQUENCE  "KEYWORDS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  ORDER NOCYCLE;


CREATE TABLE "KEYWORD_MSG"
   (    "ID" NUMBER NOT NULL ENABLE,
        "KEYWORD" VARCHAR2(30) NOT NULL ENABLE,
        "SUB_KEYWORD" VARCHAR2(30),
        "MESSAGE_ID" VARCHAR2(30),
        "DESCRIPTION" VARCHAR2(60) NOT NULL ENABLE,
        "CUSTOMER_TYPE" VARCHAR2(16) DEFAULT 'Default' NOT NULL ENABLE,
        "MESSAGE_TYPE" VARCHAR2(30) DEFAULT 'ALERT' NOT NULL ENABLE,
        "MSG_1" VARCHAR2(320) NOT NULL ENABLE,
        "MSG_2" VARCHAR2(320),
        "MSG_3" VARCHAR2(320),
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "KEYWORD_MSG_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "KEYWORD_MSG_UK" UNIQUE ("KEYWORD", "SUB_KEYWORD", "MESSAGE_ID"),
         CONSTRAINT "KEYWORD_MSG_FK" FOREIGN KEY ("KEYWORD", "SUB_KEYWORD")
          REFERENCES "KEYWORDS" ("KEYWORD", "SUB_KEYWORD") ENABLE
   );


CREATE SEQUENCE  "KEYWORD_MSG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 2 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "ZONES"
   (    "ID" NUMBER NOT NULL ENABLE,
        "ZONE_ID" NUMBER NOT NULL ENABLE,
        "BREATHING_PERIOD" NUMBER DEFAULT 0 NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "ZONES_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "ZONES_UK" UNIQUE ("ZONE_ID")
   );


CREATE SEQUENCE  "ZONES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "COUNTRIES"
   (    "ID" NUMBER NOT NULL ENABLE,
        "COUNTRY_CODE" VARCHAR2(30) NOT NULL ENABLE,
        "COUNTRY_NAME" VARCHAR2(60),
        "ZONE_ID" NUMBER NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "COUNTRIES_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "COUNTRIES_UK" UNIQUE ("COUNTRY_CODE"),
         CONSTRAINT "COUNTRIES_FK" FOREIGN KEY ("ZONE_ID")
          REFERENCES "ZONES" ("ZONE_ID") ENABLE
   );


CREATE SEQUENCE  "COUNTRIES_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 3 NOCACHE  ORDER  NOCYCLE;


CREATE SEQUENCE  "HLR_SERVERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "HLR_SERVERS"
   (    "ID" NUMBER NOT NULL ENABLE,
        "SERVER_IP" VARCHAR2(30) NOT NULL ENABLE,
        "SERVER_PORT" VARCHAR2(30),
        "SERVER_NAME" VARCHAR2(60) NOT NULL ENABLE,
        "USERNAME" VARCHAR2(60) NOT NULL ENABLE,
        "PASSWORD" VARCHAR2(60) NOT NULL ENABLE,
        "TIMEOUT" NUMBER NOT NULL ENABLE,
        "RETRY_CNT" NUMBER NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "HLR_SERVERS_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "HLR_SERVERS_UK" UNIQUE ("SERVER_NAME")
   );


CREATE TABLE "IN_SERVERS"
   (    "ID" NUMBER NOT NULL ENABLE,
        "SERVER_IP" VARCHAR2(30) NOT NULL ENABLE,
        "SERVER_PORT" VARCHAR2(30),
        "SERVER_NAME" VARCHAR2(60) NOT NULL ENABLE,
        "USERNAME" VARCHAR2(60) NOT NULL ENABLE,
        "PASSWORD" VARCHAR2(60) NOT NULL ENABLE,
        "TIMEOUT" NUMBER NOT NULL ENABLE,
        "RETRY_CNT" NUMBER NOT NULL ENABLE,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "IN_SERVERS_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "IN_SERVERS_UK" UNIQUE ("SERVER_NAME")
   );


CREATE SEQUENCE  "IN_SERVERS_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "IN_SERVER_MAPPING"
   (    "ID" NUMBER NOT NULL ENABLE,
        "SERVER_NAME" VARCHAR2(60) NOT NULL ENABLE,
        "MSISDN_FR" NUMBER,
        "MSISDN_TO" NUMBER,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "IN_SERVER_MAPPING_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "IN_SERVER_MAPPING_UK" UNIQUE ("SERVER_NAME", "MSISDN_FR"),
         CONSTRAINT "IN_SERVER_MAPPING_FK" FOREIGN KEY ("SERVER_NAME")
          REFERENCES "IN_SERVERS" ("SERVER_NAME") ENABLE
   );


CREATE SEQUENCE  "IN_SERVER_MAPPING_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "REQUEST_LOG"
   (    "ID" NUMBER NOT NULL ENABLE,
        "TRAN_DT" DATE NOT NULL ENABLE,
        "TXID" VARCHAR2(128),
        "TRAN_TYPE" VARCHAR2(30) NOT NULL ENABLE,
        "A_NO" VARCHAR2(20) NOT NULL ENABLE,
        "B_NO" VARCHAR2(20),
        "MSG" VARCHAR2(320) NOT NULL ENABLE,
        "STEP_NO" NUMBER(4,0) DEFAULT 0 NOT NULL ENABLE,
        "LAST_STEP_NO" NUMBER(4,0) DEFAULT 0 NOT NULL ENABLE,
        "STATUS" NUMBER(4,0) DEFAULT 0 NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "DT_MODIFIED" DATE,
         CONSTRAINT "TXRE_LOG_PK" PRIMARY KEY ("ID")
   );


CREATE TABLE "RESPONSE_LOG"
   (    "ID" NUMBER NOT NULL ENABLE,
        "REF_ID" NUMBER NOT NULL ENABLE,
        "TRAN_DT" DATE NOT NULL ENABLE,
        "TXID" VARCHAR2(128),
        "A_NO" VARCHAR2(20) NOT NULL ENABLE,
        "B_NO" VARCHAR2(20),
        "MSG" VARCHAR2(320) NOT NULL ENABLE,
        "STATUS" NUMBER(4,0) DEFAULT 0 NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "DT_MODIFIED" DATE,
         CONSTRAINT "TXRES_LOG_PK" PRIMARY KEY ("ID")
   );


CREATE TABLE "ACL"
   (    "ID" NUMBER(11,0) NOT NULL ENABLE,
        "ROLE_CODE" VARCHAR2(30),
        "MOD_NAME" VARCHAR2(255),
        "CAN_VIEW" NUMBER(1,0) DEFAULT 1,
        "CAN_UPDATE" NUMBER(1,0) DEFAULT 0,
        "CAN_DELETE" NUMBER(1,0) DEFAULT 0,
        "CAN_ADD" NUMBER(1,0) DEFAULT 0,
        "CAN_APPROVE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
        "CAN_RELEASE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
        "CAN_PROCESS" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
        "CAN_CANCEL" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(32) NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "UPDATED_BY" VARCHAR2(32),
        "DT_UPDATED" DATE,
        "LAST_UPDATED" DATE,
         CONSTRAINT "ACL_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "ACL_UK" UNIQUE ("ROLE_CODE", "MOD_NAME")
   );


CREATE SEQUENCE  "ACL_SEQ"  MINVALUE 1 MAXVALUE 1000000000000000000000000000 INCREMENT BY 1 START WITH 91 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "MODULES"
   (    "ID" NUMBER(11,0) NOT NULL ENABLE,
        "MOD_NAME" VARCHAR2(255),
        "MOD_DESC" VARCHAR2(255),
        "CREATED_BY" VARCHAR2(32) NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "UPDATED_BY" VARCHAR2(32),
        "DT_UPDATED" DATE,
         CONSTRAINT "MOD_PK" PRIMARY KEY ("ID")
   );


CREATE SEQUENCE  "MODULES_SEQ"  MINVALUE 1 MAXVALUE 1000000000000000000000000000 INCREMENT BY 1 START WITH 64 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "PASS_LOG"
   (    "ID" NUMBER(*,0) NOT NULL ENABLE,
        "USER_CODE" VARCHAR2(30),
        "PASSWORD" VARCHAR2(255),
        "CREATED_BY" VARCHAR2(32) NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "UPDATED_BY" VARCHAR2(32),
        "DT_UPDATED" DATE,
         CONSTRAINT "PASS_PK" PRIMARY KEY ("ID")
   );


CREATE SEQUENCE  "PASS_LOG_SEQ"  MINVALUE 1 MAXVALUE 1000000000000000000000000000 INCREMENT BY 1 START WITH 9 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "USER_LOG"
   (    "ID" NUMBER(11,0) NOT NULL ENABLE,
        "USER_CODE" VARCHAR2(30),
        "ROLE_CODE" VARCHAR2(100),
        "MOD_NAME" VARCHAR2(255),
        "IP_ADDR" VARCHAR2(22),
        "URL" VARCHAR2(256),
        "LOGS" VARCHAR2(2048),
        "CREATED_BY" VARCHAR2(32) NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "UPDATED_BY" VARCHAR2(32),
        "DT_UPDATED" DATE,
         CONSTRAINT "USLO_PK" PRIMARY KEY ("ID")
   );


CREATE SEQUENCE  "USER_LOG_SEQ"  MINVALUE 1 MAXVALUE 1000000000000000000000000000 INCREMENT BY 1 START WITH 2736 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "USER_MASTER"
   (    "USER_ID" NUMBER(11,0) NOT NULL ENABLE,
        "USER_CODE" VARCHAR2(20) NOT NULL ENABLE,
        "PASSWORD" VARCHAR2(64) NOT NULL ENABLE,
        "LAST_NAME" VARCHAR2(255),
        "FIRST_NAME" VARCHAR2(255),
        "ADDRESS" VARCHAR2(255),
        "EMAIL" VARCHAR2(255),
        "POSITION" VARCHAR2(255),
        "DEPARTMENT" VARCHAR2(255),
        "TELNO" VARCHAR2(13),
        "GSMNUM" VARCHAR2(13),
        "ROLE_CODE" VARCHAR2(30) NOT NULL ENABLE,
        "PASS_EXP_N_DAYS" NUMBER(11,0) NOT NULL ENABLE,
        "PASS_EXP_DT" DATE,
        "LOGIN" DATE,
        "LOGOUT" DATE,
        "LOCKOUT" NUMBER,
        "LOCKOUT_CTR" NUMBER DEFAULT 0,
        "IS_LOGIN" NUMBER DEFAULT 0,
        "ON_FIRST_LOGIN" NUMBER DEFAULT 0,
        "CREATED_BY" VARCHAR2(32) NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "UPDATED_BY" VARCHAR2(32),
        "DT_UPDATED" DATE,
         CONSTRAINT "USMA_PK" PRIMARY KEY ("USER_ID"),
         CONSTRAINT "USMA_UK" UNIQUE ("USER_CODE")
   );


CREATE SEQUENCE  "USER_MASTER_SEQ"  MINVALUE 1 MAXVALUE 1000000000000000000000000000 INCREMENT BY 1 START WITH 6 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "USER_ROLES"
   (    "ID" NUMBER(11,0) NOT NULL ENABLE,
        "ROLE_CODE" VARCHAR2(30),
        "ROLE_DESC" VARCHAR2(255),
        "CREATED_BY" VARCHAR2(32) NOT NULL ENABLE,
        "DT_CREATED" DATE NOT NULL ENABLE,
        "UPDATED_BY" VARCHAR2(32),
        "DT_UPDATED" DATE,
         CONSTRAINT "USRO_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "ROLE_UK" UNIQUE ("ROLE_CODE")
   );


CREATE SEQUENCE  "USER_ROLES_SEQ"  MINVALUE 1 MAXVALUE 1000000000000000000000000000 INCREMENT BY 1 START WITH 18 NOCACHE  ORDER  NOCYCLE;


CREATE TABLE "HLR_SERVER_MAPPING"
   (    "ID" NUMBER NOT NULL ENABLE,
        "SERVER_NAME" VARCHAR2(60) NOT NULL ENABLE,
        "MSISDN_FR" NUMBER,
        "MSISDN_TO" NUMBER,
        "STATUS" VARCHAR2(12) NOT NULL ENABLE,
        "CREATED_BY" VARCHAR2(30),
        "DT_CREATED" DATE,
        "UPDATED_BY" VARCHAR2(30),
        "DT_UPDATED" DATE,
         CONSTRAINT "HLR_SERVER_MAPPING_PK" PRIMARY KEY ("ID"),
         CONSTRAINT "HLR_SERVER_MAPPING_UK" UNIQUE ("SERVER_NAME", "MSISDN_FR"),
         CONSTRAINT "HLR_SERVER_MAPPING_FK" FOREIGN KEY ("SERVER_NAME")
          REFERENCES "HLR_SERVERS" ("SERVER_NAME") ENABLE
   );


CREATE SEQUENCE  "HLR_SERVER_MAPPING_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE;




CREATE OR REPLACE TRIGGER "FUN_CUST_TYPES_INSERT_TRIGGER"
before insert on fun_customer_types
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select fun_customer_types_seq.nextval into :new.id from dual;
   end if;
end FUN_CUST_TYPES_INSERT_TRIGGER;
/
ALTER TRIGGER "FUN_CUST_TYPES_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "SERVICES_INSERT_TRIGGER"
before insert on services
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select services_seq.nextval into :new.id from dual;
   end if;
end SERVICES_INSERT_TRIGGER;
/
ALTER TRIGGER "SERVICES_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "KEYWORDS_INSERT_TRIGGER"
before insert on keywords
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select keywords_seq.nextval into :new.id from dual;
   end if;
end KEYWORDS_INSERT_TRIGGER;
/
ALTER TRIGGER "KEYWORDS_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "KEYWORD_MSG_INSERT_TRIGGER"
before insert on keyword_msg
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select keyword_msg_seq.nextval into :new.id from dual;
   end if;
end KEYWORD_MSG_INSERT_TRIGGER;
/
ALTER TRIGGER "KEYWORD_MSG_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "ZONES_INSERT_TRIGGER"
before insert on zones
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select zones_seq.nextval into :new.id from dual;
   end if;
end ZONES_INSERT_TRIGGER;
/
ALTER TRIGGER "ZONES_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "COUNTRIES_INSERT_TRIGGER"
before insert on countries
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select countries_seq.nextval into :new.id from dual;
   end if;
end COUNTRIES_INSERT_TRIGGER;
/
ALTER TRIGGER "COUNTRIES_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "HLR_SERVERS_INSERT_TRIGGER"
before insert on hlr_servers
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select hlr_servers_seq.nextval into :new.id from dual;
   end if;
end HLR_SERVERS_INSERT_TRIGGER;
/
ALTER TRIGGER "HLR_SERVERS_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "IN_SERVERS_INSERT_TRIGGER"
before insert on in_servers
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select in_servers_seq.nextval into :new.id from dual;
   end if;
end IN_SERVERS_INSERT_TRIGGER;
/
ALTER TRIGGER "IN_SERVERS_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "IN_SVR_MAPPING_INSERT_TRIGGER"
before insert on in_server_mapping
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select in_server_mapping_seq.nextval into :new.id from dual;
   end if;
end IN_SVR_MAPPING_INSERT_TRIGGER;
/
ALTER TRIGGER "IN_SVR_MAPPING_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "ACL_INSERT_TRIGGER"

before insert on acl
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select acl_seq.nextval into :new.id from dual;
   end if;
end acl_insert_trigger;
/
ALTER TRIGGER "ACL_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "MODULES_INSERT_TRIGGER"

before insert on modules
for each row
 begin
   if :new.id is null or :new.id = 0
   then
 select modules_seq.nextval into :new.id from dual;
   end if;
end modules_insert_trigger;
/
ALTER TRIGGER "MODULES_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "PASS_LOG_INSERT_TRIGGER"

before insert on pass_log
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select pass_log_seq.nextval into :new.id from dual;
   end if;
end pass_log_insert_trigger;
/
ALTER TRIGGER "PASS_LOG_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "USER_LOG_INSERT_TRIGGER"

before insert on user_log
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select user_log_seq.nextval into :new.id from dual;
   end if;
end user_log_insert_trigger;
/
ALTER TRIGGER "USER_LOG_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "USER_MASTER_INSERT_TRIGGER"

before insert on user_master
for each row
begin
   if :new.user_id is null or :new.user_id = 0
   then
 select user_master_seq.nextval into :new.user_id from dual;
   end if;
end user_master_insert_trigger;
/
ALTER TRIGGER "USER_MASTER_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "USER_ROLES_INSERT_TRIGGER"

before insert on user_roles
for each row
begin
   if :new.id is null or :new.id = 0
   then
 select user_roles_seq.nextval into :new.id from dual;
   end if;
end user_roles_insert_trigger;
/
ALTER TRIGGER "USER_ROLES_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "HLR_SVR_MAPPING_INSERT_TRIGGER"
before insert on hlr_server_mapping
for each row
begin
   if :new.id is null or :new.id = 0
   then
      select hlr_server_mapping_seq.nextval into :new.id from dual;
   end if;
end HLR_SVR_MAPPING_INSERT_TRIGGER;
/
ALTER TRIGGER "HLR_SVR_MAPPING_INSERT_TRIGGER" ENABLE;

CREATE OR REPLACE TRIGGER "REQUEST_LOG_INSERT_TRIGGER"
before insert on request_log
for each row
begin
   :new.tran_dt := trunc(nvl(:new.dt_created, sysdate));
end REQUEST_LOG_INSERT_TRIGGER;
/
ALTER TRIGGER "REQUEST_LOG_INSERT_TRIGGER" ENABLE;


CREATE OR REPLACE TRIGGER "RESPONSE_LOG_INSERT_TRIGGER"
before insert on response_log
for each row
begin
   :new.tran_dt := trunc(nvl(:new.dt_created, sysdate));
end RESPONSE_LOG_INSERT_TRIGGER;
/
ALTER TRIGGER "RESPONSE_LOG_INSERT_TRIGGER" ENABLE;

CREATE OR REPLACE TRIGGER "TRANSACTION_LOG_INSERT_TRIGGER"
before insert on transaction_log
for each row
begin
   :new.tran_dt := trunc(nvl(:new.tx_start, sysdate));
end TRANSACTION_LOG_INSERT_TRIGGER;
/
ALTER TRIGGER "TRANSACTION_LOG_INSERT_TRIGGER" ENABLE;
