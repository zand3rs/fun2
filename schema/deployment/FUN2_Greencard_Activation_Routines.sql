set define ^CREATE OR REPLACE PROCEDURE trigger_owner.sp_get_usurf_promo_kw (   p_promo_name out varchar,    p_keyword out varchar2,    p_sub_keyword out varchar,    p_soc_id in varchar,    p_brand in varchar) is   vName  conditioner_promos.promo_name%type;   vCode  conditioner_promos.promo_code%type;   vValue conditioner_promos.promo_value%type;begin   vName  := '';   vCode  := '';   vValue := '';   begin      select promo_name, promo_code, promo_value      into   vName, vCode, vValue      from   conditioner_promos      where  soc_id = p_soc_id      and    brand = p_brand;   exception      when no_data_found then null;      when others then null;   end;   p_promo_name  := vName;   p_keyword     := vCode;   p_sub_keyword := vValue;END sp_get_usurf_promo_kw;/show errCREATE OR REPLACE FUNCTION trigger_owner.sf_greencard_crm_reg_notif (p_msisdn in varchar2, p_keyword in varchar2, p_sub_keyword in varchar2, p_dt_activated in date) return number is   vMessageId keyword_msg.message_id%type;   vMessage   keyword_msg.msg_1%type;BEGIN   if p_sub_keyword = '3D' then      vMessageId := 'VROAM_SURF3D_ON_SUCCESSFUL';   elsif p_sub_keyword = '5D' then      vMessageId := 'VROAM_SURF5D_ON_SUCCESSFUL';   elsif p_sub_keyword = '7D' then      vMessageId := 'VROAM_SURF7D_ON_SUCCESSFUL';   elsif p_sub_keyword = '15D' then      vMessageId := 'VROAM_SURF15D_ON_SUCCESSFUL';   elsif p_sub_keyword = '30D' then      vMessageId := 'VROAM_SURF30D_ON_SUCCESSFUL';   end if;   begin      select msg_1       into   vMessage       from   keyword_msg       where  message_id=vMessageId;   exception      when no_data_found then return 0;   end;   if vMessage is not null then        begin           insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg, brand, dt_created)           values (broadcast_log_seq.nextval, p_msisdn, vMessageId, trunc(sysdate), 0, 1, vMessage, 'PREPAID', sysdate);        exception            when dup_val_on_index then return 0;        end;   end if;   return 1;END sf_greencard_crm_reg_notif;/show errCREATE OR REPLACE PROCEDURE trigger_owner.sp_process_mlp (  p_retr out number,  p_msisdn in varchar2,  p_transaction_code in varchar2,  p_transaction_id in varchar2,  p_bill_cycle in varchar2,  p_type in varchar2,  p_soc in varchar2,  p_effdate in varchar2 ) is  nRetr         number;  nUdrDays      mlp_services.num_days%type;  vServiceCyle  mlp_services.service_cycle%type;  vMsg_Start    mlp_messages.message%type;  vPromoName    conditioner_promos.promo_name%type;  vPromoCode    conditioner_promos.promo_code%type;  vPromoValue   conditioner_promos.promo_value%type;  nNextId       number;  dEffDate      date;  dExpiryNotif  date;  nGreencard    number := 0;begin   sp_logger('PROCESS_MLP' , 'START =>'              ||                             ' p_msisdn:'            || p_msisdn ||                             ' p_transaction_code:'  || p_transaction_code ||                             ' p_transaction_id:'    || p_transaction_id ||                             ' p_bill_cycle:'        || p_bill_cycle ||                             ' p_type:'              || p_type ||                             ' p_soc:'               || p_soc ||                             ' p_effdate:'           || p_effdate);   nRetr := 1;   begin      select to_date(replace(p_effdate,'T',' '), 'YYYY-MM-DD HH24:MI:SS') into dEffDate from dual;   exception     when others then         nRetr := 104;   end;   if p_type IN ('AddedServices', 'Services') then      if nRetr = 1 then         -- get udr days, service cycle         begin            select num_days, service_cycle            into   nUdrDays, vServiceCyle            from   mlp_services            where  soc_id = p_soc;         exception            when no_data_found then               nRetr := 102;         end;      end if;      if nRetr = 1 then         begin            select mlp_seq.nextval into nNextId from dual;            insert into mlp_log (                    id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, last_usage_dt, last_usage_tm,                    usage_expiry, cycle_no, transaction_id, transaction_code, remaining_days, dt_created, created_by)            values (nNextId, p_msisdn, p_soc, vServiceCyle, dEffDate, null, nUdrDays, null, null,                    null, p_bill_cycle, p_transaction_id, p_transaction_code, nUdrDays, sysdate, user );         exception            when dup_val_on_index then               nRetr := 101;         end;      else         begin            sp_get_usurf_promo_kw (vPromoName, vPromoCode, vPromoValue, p_soc, 'POSTPAID');            if vPromoCode is not null then               insert into conditioner_log (id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, brand, request_id, dt_activated, dt_notif, src, dt_created, created_by)               values (conditioner_log_seq.nextval, '20', 1, p_msisdn, vPromoCode, vPromoValue, vPromoName, p_soc, 2, 'POSTPAID', 0, dEffDate, to_date(to_char(sysdate, 'YYYYMMDD') || ' '|| to_char(dEffDate,'HH24MISS'), 'YYYYMMDD HH24MISS')+1, 'CRM', sysdate, user);               if sf_greencard_crm_reg_notif (p_msisdn, vPromoCode, vPromoValue, dEffDate) = 1 then                  nRetr := 1;               else                  rollback;               end if;           end if;         exception            when dup_val_on_index then                nRetr := 101;         end;      end if;   elsif p_type = 'RemovedServices' then      if nRetr = 1 then         sp_greencard_expire_plan(nGreencard, p_msisdn,p_soc);         update mlp_log set expiry_date = dEffDate where msisdn=p_msisdn and soc_id = p_soc returning expiry_notif into dExpiryNotif;         if sql%notfound then            if nGreencard = 0 then               nRetr := 109;            end if;         else            if (dExpiryNotif is not null) and (dExpiryNotif > dEffDate) then               insert into mlp_log_history                      ( id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                       last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, dt_deleted, deleted_by )               select id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                      last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, sysdate, user               from   mlp_log               where  msisdn=p_msisdn and soc_id=p_soc;               delete from  mlp_log where msisdn=p_msisdn and soc_id=p_soc;            end if;         end if;      end if;   else      nRetr := 110;   end if;   sp_logger('PROCESS_MLP' , 'END => nRetr:' || nRetr );   p_retr := nRetr;   commit;END sp_process_mlp;/show errset define &                                                                                                                                                         