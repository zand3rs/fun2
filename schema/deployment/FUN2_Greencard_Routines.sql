set define ^CREATE OR REPLACE PROCEDURE TRIGGER_OWNER.SP_GET_USURF_SID (   p_promo_name out varchar,    p_service_id out varchar,   p_keyword in varchar2,    p_sub_keyword in varchar,    p_brand in varchar) is   vName conditioner_promos.promo_name%type;   vID   conditioner_promos.service_id%type;begin   vName := '<PROMO NAME>';   vID   := '1333';   begin      select promo_name, service_id      into   vName, vID      from   conditioner_promos      where  promo_code = upper(p_keyword)      and    promo_value = upper(p_sub_keyword)      and    brand = p_brand;   exception      when no_data_found then null;      when others then null;   end;   p_promo_name := vName;   p_service_id := vID;end sp_get_usurf_sid;/show errCREATE OR REPLACE FUNCTION TRIGGER_OWNER.SF_CHECK_USURF_STATUS (   p_msisdn in number,   p_keyword in varchar2,   p_sub_keyword in varchar2,   p_coexist in number,  -- 0 regular status check, 1 coex check   p_brand in varchar2,  -- prepaid and postpaid   p_status in number  -- prepaid status is 3 (preact), postpaid status is 2 (active)   ) return number is   nUsurfer Number(1);   nActivationPending  Number;   vStatus conditioner_log.status%type;begin	if p_brand = 'POSTPAID' and p_coexist = 1 then 		return 0; 	end if;	   nUsurfer := 0;   select 1   into   nUsurfer   from   conditioner_log   where  msisdn = p_msisdn   and    promo_code = p_keyword   and    promo_value = p_sub_keyword   and    tran_type = 20   and    brand = p_brand   and    status = p_status;   return nUsurfer;exception   when no_data_found then       if p_coexist = 1 then         if p_brand = 'PREPAID' then             begin               select count(1)               into   nUsurfer               from   conditioner_log                where  msisdn = p_msisdn               and    brand = p_brand               and    status = p_status               and    tran_type = 20;               if nUsurfer = 0 then                  nUsurfer := 0;               else                  select 0                  into   nUsurfer                  from   conditioner_log a, conditioner_coex b                  where  a.msisdn = p_msisdn                  and    a.brand = p_brand                  and    a.status = p_status                  and    a.promo_code = b.promo_code                  and    a.promo_value = b.promo_value			            and    a.tran_type = 20                  and    b.allowed_promo_code = p_keyword                  and    b.allowed_promo_value = p_sub_keyword                  and    rownum = 1;               end if;            exception               when no_data_found then nUsurfer := 1;            end;         else            begin               select count(1)               into   nUsurfer               from   conditioner_log                where  msisdn = p_msisdn               and    brand = p_brand               and    status >= 0                and    tran_type = 20;               if nUsurfer = 0 then                  nUsurfer := 0;               else                  select 0                  into   nUsurfer                  from   conditioner_log a, conditioner_coex b                  where  a.msisdn = p_msisdn                  and    a.brand = p_brand                  and    a.status >= 0			            and    a.tran_type = 20                  and    a.promo_code = b.promo_code                  and    a.promo_value = b.promo_value                  and    b.allowed_promo_code = p_keyword                  and    b.allowed_promo_value = p_sub_keyword                  and    rownum = 1;               end if;            exception               when no_data_found then nUsurfer := 1;            end;         end if;      end if;      return nUsurfer;end sf_check_usurf_status;/show errCREATE OR REPLACE PROCEDURE "TRIGGER_OWNER"."SP_INIT_TRAN" (    p_retr      out number,    p_extra_o_1 out varchar2,    p_extra_o_2 out varchar2,    p_extra_o_3 out varchar2,    p_trantype  in  number,    p_msisdn    in  varchar2,    p_req_id    in  number,    p_ref_id    in  number,    p_extra_i_1 in  varchar2,    p_extra_i_2 in  varchar2,    p_extra_i_3 in  varchar2,    p_extra_i_4 in  varchar2   ) is   nRetr                Number;   bRoamer              Boolean;   nMinBal              Number;   nMinBal_Web          Number;   nDuration            Number;   nCustMinBal          Number;   nCustDuration        Number;   nCustBreathingPeriod Number;   nCustPre_Act_Day     Number;   nCustNum_Link        Number;   dActivation          Date;   dDeactivation        Date;   vProfile             Varchar2(16);   nPreActPending       Number;   nDefaultDuration     Number := 180;   nDefaultPreAct       Number := 7;   nMinBalExt           Number;   dSubsActDt           Date;   dSubsDeactDt         Date;   nSubsInHot           Number;   dSubsHotDt           Date;   nSubsHotDur          Number;   nBreathing_period    Number;   nDefaultMaxDuration  Number := 9999;   nRoamerStatus        Number;   vStatus              Varchar2(12);   vBlackReason         Varchar2(128);   vActiveLinks         Varchar2(128);   nLinkTo              Number;   vOtherType           Varchar2(30);   vIMSI                Varchar2(30);   -- Bluemoon   vPromoName           conditioner_promos.promo_name%type;   vNF_ServiceID        conditioner_promos.service_id%type;   -- Voyager   isVYGR               Boolean;   vVYGR_exp            Varchar2(30);begin   --  For All tran type   --    100 - Blacklisted   --    101 - Invalid Duration   --    102 - no active roaming   --    103 - no active fun profile   --    104 - Invalid Activation Date Format   --    105 - Invalid Pre-Activation past 7 days   --    106 - Duplicate Pre-Activation   --    107 - Reached Max Num Link   --    108 - Insuff balance   --    109 - already active roamer   --    110 - Reg and Link Error - Local SIM is already used as OFW SIM   --    111 - Invalid Duration for GROAM EXTEND   --    112 - Reg and Link Error - Link Already exists   --    113 - for GROAM ON - Not in HLR Range   --    114 - Reg and Link - Local SIM already link   --    115 - REG - Not in customer type mapping or not in range   --    116 - REG - LOCAL SIM same with OFW SIM   --    117 - REG - only PREPAID are allowed   --    118 - REG - link to POSTPAID are not allowed   --    119 - GROAM ON - on breathing period   --    140 - GROAM EXTEND - with open ended roaming   --    141 - YES - no pending link   --    142 - Invalid Syntax or Invalid Match but existing FUN subs   --    143 - Reg and Link - OFW SIM already link as Local SIM   --    144 - Cancel Error - Sender is local SIM   --    145 - USURF ON Error - Already subscribe to USURF (na)   --    146 - USURF ON Error - invalid country (na)   --    147 - USURF ON Error - invalid duration (na)   --    148 - USURF STATUS for no subscription   --    149 - USURF STATUS with pending subscription (na)   --    150 - USURF ok   --    151 - USURF pre-activation   --    152 - USURF invalid keyword   --    153 - USURF coex   --    155 - VYGR ON Error - Already subscribe to USURF (na)   --    156 - VYGR ON Error - invalid country (na)   --    157 - VYGR ON Error - invalid duration (na)   --    158 - VYGR STATUS for no subscription   --    159 - VYGR STATUS with active subscription (na)   --    160 - VYGR ok   --    161 - VYGR pre-activation (na)   --    162 - VYGR invalid keyword   --    163 - VYGR coex (na)   --  0    TRAN_TYPE_UNKNOWN,   --  1    TRAN_TYPE_HELP,   --  2    TRAN_TYPE_REG,   --  3    TRAN_TYPE_UNREG,   --  4    TRAN_TYPE_LINK,   --  5    TRAN_TYPE_CHECKLINK,   --  6    TRAN_TYPE_CANCEL,   --  7    TRAN_TYPE_GROAM_HELP,   --  8    TRAN_TYPE_GROAM_ON,   --  9    TRAN_TYPE_GROAM_OFF,   -- 10    TRAN_TYPE_GROAM_EXTEND,   -- 11    TRAN_TYPE_GROAM_STATUS,   -- 12    TRAN_TYPE_GLIST   -- 13    TRAN_TYPE_GLIST_ZONE   -- 17    TRAN_TYPE_YES   -- 18    TRAN_TYPE_YES_ARDS   -- 19    TRAN_TYPE_NO_ARDS   -- 20    USURF_ON   -- 21    USURF_OFF   -- 22    USURF_STATUS   -- retr successful returns   --      1 - successful except pre-reg   --      2 - successful for pre-reg   sp_logger('INIT' , 'START =>'      ||                      ' p_trantype :' || to_char(p_trantype) ||                      ' p_msisdn:'    || p_msisdn            ||                      ' p_req_id:'    || to_char(p_req_id)   ||                      ' p_ref_id:'    || to_char(p_ref_id)   ||                      ' p_extra_i_1:' || p_extra_i_1         ||                      ' p_extra_i_2:' || p_extra_i_2         ||                      ' p_extra_i_3:' || p_extra_i_3         ||                      ' p_extra_i_4:' || p_extra_i_4);   nRetr     := 1; -- successful except prereg   bRoamer   := FALSE;   nMinBal   := -1;   if sf_is_blacklisted(p_msisdn) > 0 then      if p_trantype = 2 then         vBlackReason := 'Error on REG due to blacklisting.';      elsif p_trantype = 3 then         vBlackReason := 'Error on UNREG due to blacklisting.';      elsif p_trantype = 4 then         vBlackReason := 'Error on LINK due to blacklisting.';      elsif p_trantype = 6 then         vBlackReason := 'Error on CANCEL due to blacklisting.';      elsif p_trantype = 8 then         vBlackReason := 'Error on GROAM ON due to blacklisting.';      elsif p_trantype = 9 then         vBlackReason := 'Error on GROAM OFF due to blacklisting.';      else         vBlackReason := 'Error accessing application due to blacklisting.';      end if;      insert into BLACKLISTED_WHITELISTED_LOG      values (p_msisdn, 'BLACKLISTED', sysdate, vBlackReason, trunc(sysdate), user, 0 );      commit;      nRetr  := 100;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- GROAM ON - validate msisdn if its in range   if (p_trantype in (8,9)) and (sf_is_in_hlr_range(p_msisdn) = 0) then      nRetr  := 113;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- REG - validate msisdn if its in range   --if (p_trantype = 2) and (sf_is_in_customer_type_range('FUN', p_msisdn) = 0) then   --   nRetr  := 115;   --   p_retr := nRetr;   --   return;   --end if;   -- REG - LOCAL SIM same with OFW SIM   if (p_trantype in (2,3,4,5,6)) and ( p_msisdn = p_extra_i_3) then      if (p_trantype = 5) then          vActiveLinks := sf_get_fun_links(p_msisdn);          if vActiveLinks is not null then             nRetr  := 142;             p_retr := nRetr;             p_extra_o_2 := vActiveLinks;             sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);             return;          else             vActiveLinks := sf_get_fun_links_local(p_msisdn);             if vActiveLinks is not null then                nRetr  := 142;                p_retr := nRetr;                p_extra_o_2 := vActiveLinks;                sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);                return;             end if;          end if;      end if;      nRetr  := 116;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- REG - only PREPAID are allowed   if (p_trantype in (2,3)) and (sf_is_in_hlr_range(p_msisdn) = 0) then      nRetr  := 117;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- REG - only PREPAID are allowed   if (p_trantype in (2,3)) and (sf_is_in_hlr_range(p_extra_i_3) = 0) then      nRetr  := 118;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- LINK - only PREPAID are allowed   if (p_trantype in (4,6)) and (sf_is_in_hlr_range(p_msisdn) = 0) then      nRetr  := 118;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- LINK - only PREPAID are allowed   if (p_trantype in (4,6)) and (sf_is_in_hlr_range(p_extra_i_3) = 0) then      nRetr  := 117;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   -- GROAM ON - validate start date   if (p_trantype = 8) and (p_extra_i_1 is not null) then      begin         if length(p_extra_i_1) < 10 then            nRetr  := 104;            p_retr := nRetr;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;         end if;         dActivation := to_date(p_extra_i_1, 'MM/DD/YYYY');         if dActivation < trunc(sysdate) then            nRetr  := 105;            p_retr := nRetr;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;         end if;      exception         when others then            nRetr  := 104;            p_retr := nRetr;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;      end;   end if;   -- GROAM ON and GROAM EXTEND - validate duration   if (p_trantype in (8,10)) and (p_extra_i_2 is not null) and (nvl(p_ref_id, 0) = 0) then      if (p_extra_i_2 is not null) then         begin            nDuration := to_number(p_extra_i_2);         exception            when others then               if (p_trantype = 8) then                  nRetr := 101;               --else               --   nRetr := 111;               end if;               p_retr := nRetr;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);               return;         end;         -- GROAM EXTEND - validate duration         -- allow open duration for subs in non-hot country         --if (p_trantype = 10) and (nDuration=0) then         --   nRetr  := 111;         --   p_retr := nRetr;         --   sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         --   return;         --end if;      end if;   end if;   -- 2 - TRAN_TYPE_REG   -- 4 - TRAN_TYPE_LINK   -- 8 - TRAN_TYPE_GROAM_ON   -- 10 - TRAN_TYPE_GROAM_EXTEND   if (p_trantype in (2,4,8,10)) then      -- check if process comes from web or sms      nBreathing_period := 0;      if nvl(p_ref_id, 0) > 0 then         begin            select nvl(min_bal,0), nvl(duration,0), tx_date, nvl(breathing_period,0), other_type, nvl(min_bal,1)            into   nMinbal, nDuration, dActivation, nBreathing_period, vOtherType, nMinBal_Web            from   manual_enrollment_log            where  id = p_ref_id;            -- check if exempt from bal check            if nMinbal <> 0 then               nMinbal := -1;            end if;            if nDuration = 0 then               nDuration := null;            end if;         exception            when NO_DATA_FOUND then nMinbal := -1;         end;      end if;      -- GROAM ON - validate activation date      if (p_trantype = 8) and (dActivation is null) then         nRetr  := 104;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- get customer type info      begin         if p_trantype in (2,4) then            vProfile := 'FUN';         else            if (sf_is_active_fun(p_msisdn) > 0) then               vProfile := 'FUN';            else               vProfile := sf_get_customer_type(to_number(p_msisdn));            end if;         end if;         select nvl(min_balance,0) min_balance, nvl(max_duration,nDefaultDuration) max_duration, breathing_period, nvl(pre_act_day,nDefaultPreAct), nvl(num_link,2), ext_min_balance         into   nCustMinbal, nCustDuration, nCustBreathingPeriod, nCustPre_act_day, nCustNum_Link, nMinBalExt         from   customer_types         where  customer_type = vProfile;      exception         when no_data_found then            raise_application_error(-200002, 'Customer type: ' || vProfile || ' not defined. Please contact your application provider.');      end;      -- GROAM ON - validate max duration      if (p_trantype = 8) then         nCustDuration := nDefaultMaxDuration;         if (nDuration is not null) and (nDuration > 0) and (nCustDuration < nDuration) then            nRetr := 101;            p_retr := nRetr;            return;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         end if;      end if;      -- GROAM ON - validate past pre act days      if (p_trantype = 8) and (dActivation > (trunc(sysdate)+nCustPre_act_day)) then         nRetr  := 105;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- GROAM ON      if (p_trantype = 8) and (sf_is_roamer_info_imsi(p_msisdn, dSubsActDt, dSubsDeactDt, nSubsHotDur, nSubsInHot, dSubsHotDt, vStatus, vIMSI ) > 0) then         -- validate if already roamer         if (vStatus='ACTIVE') then            begin               insert into ARDSResponse (id, imsi, enrollment_type, status, cause, start_tm, end_tm)               values (ARDSResponse_id_seq.nextval, vIMSI, 'ACTIVATION', 0, 2, sysdate, null);            exception               when others then null;            end;            nRetr := 109;            p_retr := nRetr;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;         end if;         -- validate breathing period         if (nBreathing_period=0) and (nSubsHotDur>0) and (nSubsInHot > 0) and            ((nvl(dSubsDeactDt,sysdate)-dSubsActDt) >= nSubsHotDur) and            ((trunc(sysdate)-dSubsDeactDt) < nCustBreathingPeriod )         then            nRetr := 119;            p_retr := nRetr;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;         end if;      end if;      -- GROAM EXTEND - validate max duration      if (p_trantype = 10) then         -- GROAM EXTEND - validate if not an existing roamer         begin            select hot_country_cnt            into   nSubsInHot            from   sim_activation            where  msisdn = p_msisdn            and    status = 'ACTIVE';         exception            when no_data_found then               nRetr := 102;               p_retr := nRetr;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);               return;         end;         dbms_output.put_line('nDuration:'|| to_char(nDuration) || ' nCustDuration:'|| to_char(nCustDuration)  || ' nSubsInHot:'|| to_char(nSubsInHot));         if (nSubsInHot > 0) then            -- open duration is not allowed for subs in hot country, allowed is up to max duration.            if (nDuration is null) or (nDuration=0) or (nCustDuration < nDuration) then               nRetr := 111;               p_retr := nRetr;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' spcl nCustDuration: ' || to_char(nCustDuration) || ', nDuration:' || to_char(nDuration) );               return;            end if;         else            -- allow open duration for subs in non-hot country            nCustDuration := nDefaultMaxDuration;            if (nDuration is not null) and (nDuration > 0 ) and (nCustDuration < nDuration) then               nRetr := 111;               p_retr := nRetr;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' rgrl nCustDuration: ' || to_char(nCustDuration) || ', nDuration:' || to_char(nDuration) );               return;            end if;         end if;      end if;      -- GGROAM EXTEND - validate current duration check if open duration      --if (p_trantype = 10) and (dSubsDeactDt is null) then      --   nRetr := 140;      --   p_retr := nRetr;      --   sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:'|| p_extra_o_3);      --   return;      --end if;      -- REG - check if LOCAL SIM was already used as OFW SIM      if (p_trantype = 2) and (sf_is_active_fun(p_msisdn) > 0) then         nRetr := 110;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- REG - if link already exists      if (p_trantype = 2) and (sf_is_link_active(p_extra_i_3, p_msisdn) > 0) then         nRetr := 112;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- REG - local sim already link to OFW SIM      if (p_trantype = 2) and (sf_is_local_sim_active_link(p_msisdn) > 0) then         nRetr := 114;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- REG - OFW sim already link as LOCAL SIM      if (p_trantype = 2) and (sf_is_local_sim_active_link(p_extra_i_3) > 0) then         nRetr := 143;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- REG - exceeds max number of link for OFW SIM      if (p_trantype = 2) and (sf_is_active_fun(p_extra_i_3) >= nCustNum_Link) then         nRetr := 107;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- LINK - sim already link as LOCAL SIM      if (p_trantype = 4) and (sf_is_local_sim_active_link(p_msisdn) > 0) then         nRetr := 144;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- LINK - sim already link as LOCAL SIM      if (p_trantype = 4) and (sf_is_local_sim_active_link(p_extra_i_3) > 0) then         nRetr := 114;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- LINK - check if LOCAL SIM was already used as OFW SIM      if (p_trantype = 4) and (sf_is_active_fun(p_extra_i_3) > 0) then         nRetr := 110;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- LINK - if link already exists      if (p_trantype = 4) and (sf_is_link_active(p_msisdn, p_extra_i_3) > 0) then         nRetr := 112;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- LINK - exceeds max number of link for OFW SIM      if (p_trantype = 4) and (sf_is_active_fun(p_msisdn) >= nCustNum_Link) then         nRetr := 107;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      -- get default mimimun balance      if (nMinbal = 0) and (nvl(p_ref_id, 0) > 0) then         nMinBal := 0;      else         if p_trantype = 10 then            nMinBal := nMinBalExt;         else            nMinBal := nCustMinbal;         end if;      end if;      if (dActivation > trunc(sysdate)) and (p_trantype = 8) then         begin            -- check if there's already pending pre-act transaction            SELECT count(1)            INTO   nPreActPending            FROM   MANUAL_ENROLLMENT_LOG            WHERE  ENROLLMENT_TYPE = 'ACTIVATION'            AND    MSISDN = p_msisdn            AND    STATUS = 0;            nRetr := 2;            if nPreActPending = 0 then               sp_logger('INIT' , 'MID => p_trantype :' || to_char(p_trantype) || ' nMinBal:' || to_char(nMinBal) || ', nCustMinbal:' || to_char(nCustMinbal));               INSERT INTO MANUAL_ENROLLMENT_LOG ( ID, MSISDN, ENROLLMENT_TYPE, BULK_UPLOAD, TX_DATE, DURATION, STATUS, CS_USERNAME, DT_CREATED, subs_name, subs_group, subs_contact_no, remarks, bulk_grp_id, min_bal, breathing_period, request_origin , customer_type)               VALUES (manual_enrollment_log_seq.nextval, p_msisdn, 'ACTIVATION', 0, dActivation, nvl(nDuration,0), 0, user, sysdate, NULL, vProfile, NULL, 'Pre-activation', NULL, decode(nMinBal, 0, 0, 1), 0, 'SMS', vProfile);            else               nRetr := 106;               p_retr := nRetr;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);               return;            end if;         exception            when dup_val_on_index then              nRetr := 106;              p_retr := nRetr;              sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);              return;            when others then              nRetr := SQLCODE;              p_retr := nRetr;              sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' ORAERR p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);              return;         end;      elsif (p_trantype = 8) then         update request_log         set    duration = nDuration,                min_bal  = nMinBal,                breathing_period = nBreathing_period,                msg = nvl(vOtherType, 'ACTIVATION')         where  id = p_req_id;      elsif (p_trantype = 10) then         update request_log         set    duration = nDuration,                min_bal  = nMinBal,                breathing_period = nBreathing_period         where  id = p_req_id;      end if;   --  9 - TRAN_TYPE_GROAM_OFF   elsif (p_trantype = 9) then      nRoamerStatus := SF_CHECK_ROAMER_STATUS_IMSI(p_msisdn, vIMSI);      if nRoamerStatus = 0 then         begin            insert into ARDSResponse (id, imsi, enrollment_type, status, cause, start_tm, end_tm)            values (ARDSResponse_id_seq.nextval, vIMSI, 'DEACTIVATION', 0, 2, sysdate, null);         exception            when others then null;         end;         nRetr := 102;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      elsif nRoamerStatus = 2 then         nRetr := 2;      end if;      if nvl(p_ref_id, 0) > 0 then         --begin         --   select other_type         --   into   vOtherType         --   from   manual_enrollment_log         --   where  id = p_ref_id;            if vOtherType = 'INSUFF_BAL' then               nRetr := 3;            --elsif vOtherType = 'OVERSTAY_HOT_COUNTRY' then            --   nRetr := 4;            end if;         --exception         --   when NO_DATA_FOUND then nMinbal := -1;         --end;      end if;   --  11 - TRAN_TYPE_GROAM_STATUS   elsif (p_trantype = 11) then      if sf_is_active_roamer(p_msisdn) = 0 then         nRetr := 102;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;   -- 3 - TRAN_TYPE_UNREG   elsif (p_trantype = 3) and (sf_is_link_active(p_extra_i_3, p_msisdn) = 0) then      if sf_is_active_fun(p_msisdn) > 0  then         nRetr  := 144;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      nRetr := 103;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   -- 5 - TRAN_TYPE_CHECKLINK   elsif (p_trantype = 5) then      if (p_extra_i_3 is not null) then         begin            nLinkTo := to_number(p_extra_i_3);            if nLinkTo < 639000000000 then               nLinkTo := null;            end if;         exception            when others then nLinkTo := null;         end;      else         nLinkTo := null;      end if;      if (nLinkTo is null) then         vActiveLinks := sf_get_fun_links(p_msisdn);         if vActiveLinks is not null then            nRetr  := 142;            p_retr := nRetr;            p_extra_o_2 := vActiveLinks;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;         else            vActiveLinks := sf_get_fun_links_local(p_msisdn);            if vActiveLinks is not null then               nRetr  := 142;               p_retr := nRetr;               p_extra_o_2 := vActiveLinks;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);               return;            else               nRetr  := 141;               p_retr := nRetr;               p_extra_o_2 := '';               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);               return;            end if;         end if;      end if;      if (sf_is_link_active(p_msisdn, p_extra_i_3) = 0) then         if (sf_is_link_active(p_extra_i_3, p_msisdn) = 0) then            vActiveLinks := sf_get_fun_links(p_msisdn);            if vActiveLinks is not null then               nRetr  := 142;               p_retr := nRetr;               p_extra_o_2 := vActiveLinks;               sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);               return;            else               vActiveLinks := sf_get_fun_links_local(p_msisdn);               if vActiveLinks is not null then                  nRetr  := 142;                  p_retr := nRetr;                  p_extra_o_2 := vActiveLinks;                  sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);                  return;               end if;            end if;            nRetr := 103;            p_retr := nRetr;            sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);            return;         end if;      end if;   -- 6 - TRAN_TYPE_CANCEL   elsif (p_trantype = 6) and (sf_is_link_active(p_msisdn, p_extra_i_3) = 0) then      vActiveLinks := sf_get_fun_links_local(p_msisdn);      if vActiveLinks is not null then         nRetr  := 144;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      nRetr := 103;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   -- 14 - TRAN_TYPE_YES   elsif (p_trantype = 17) and (sf_is_link_pending(p_msisdn) = 0) then      nRetr := 141;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   -- 18    TRAN_TYPE_YES_ARDS   elsif (p_trantype = 18) then      nRoamerStatus := sf_check_roamer_status(p_msisdn);      if nRoamerStatus = 0 then         nRetr := 102;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      nRetr := 1;      p_retr := nRetr;      return;   -- 20    TRAN_TYPE_USURF_ON   elsif (p_trantype = 20) then      if sf_is_in_hlr_range(p_msisdn) = 0 then         isVYGR := TRUE;      else         isVYGR := FALSE;      end if;      if sf_is_valid_usurf(p_extra_i_1, p_extra_i_2)=2 then         if isVYGR then            nRetr := 162;         else            nRetr := 152;         end if;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      if isVYGR then         nRetr := 160;         nRoamerStatus := 0;         -- if sf_check_usurf_status(p_msisdn, p_extra_i_1, p_extra_i_2, 0, 'POSTPAID', 2) = 1 then         --    nRetr := 159;         -- else            begin               sp_get_usurf_sid (vPromoName, vNF_ServiceID, p_extra_i_1, p_extra_i_2, 'POSTPAID');               insert into conditioner_log (id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, brand, request_id, dt_created, created_by)               values (conditioner_log_seq.nextval, p_trantype, 1, p_msisdn, p_extra_i_1, p_extra_i_2, vPromoName, vNF_ServiceID, nRoamerStatus, 'POSTPAID', p_req_id, sysdate, user);            exception               when dup_val_on_index then                  update conditioner_log                  set    status = 0, request_id = p_req_id                  where  tran_type = p_trantype                  and    msisdn = p_msisdn                  and    request_id = p_req_id;            end;            commit;         -- end if;      else         if sf_check_roamer_status(p_msisdn) = 1 then            nRetr := 150;            nRoamerStatus := 0;         else            nRetr := 151;            nRoamerStatus := 3;         end if;         -- pre-activation         if nRetr = 151 then            if sf_check_usurf_status(p_msisdn, p_extra_i_1, p_extra_i_2, 1, 'PREPAID', 3) = 1 then               nRetr := 153;            end if;         end if;                  if nRetr in (150,151) then            begin               sp_get_usurf_sid (vPromoName, vNF_ServiceID, p_extra_i_1, p_extra_i_2, 'PREPAID');               insert into conditioner_log (id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, brand, request_id, dt_created, created_by)               values (conditioner_log_seq.nextval, p_trantype, 1, p_msisdn, p_extra_i_1, p_extra_i_2, vPromoName, vNF_ServiceID, nRoamerStatus, 'PREPAID', p_req_id, sysdate, user);            exception               when dup_val_on_index then                  if nRetr = 150 then                     update conditioner_log                     set    status = 0, request_id = p_req_id                     where  tran_type = p_trantype                     and    msisdn = p_msisdn                     and    request_id = p_req_id;                  end if;            end;            commit;         end if;      end if;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   -- 21    TRAN_TYPE_USURF_OFF   -- 22    TRAN_TYPE_USURF_STATUS   elsif (p_trantype IN (21,22)) then      if sf_is_in_hlr_range(p_msisdn) = 0 then         isVYGR := TRUE;      else         isVYGR := FALSE;      end if;      if sf_is_valid_usurf(p_extra_i_1, p_extra_i_2)=2 then         if isVYGR then            nRetr := 162;         else            nRetr := 152;         end if;         p_retr := nRetr;         sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);         return;      end if;      if isVYGR then         nRetr := 161;         nRoamerStatus := 0;         if sf_check_usurf_status(p_msisdn, p_extra_i_1, p_extra_i_2, 0, 'POSTPAID', 2) = 0 then            nRetr := 158;         else            if (p_trantype = 21) then               begin                  sp_get_usurf_sid (vPromoName, vNF_ServiceID, p_extra_i_1, p_extra_i_2, 'POSTPAID');                  insert into conditioner_log (id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, brand, request_id, dt_created, created_by)                  values (conditioner_log_seq.nextval, p_trantype, 1, p_msisdn, p_extra_i_1, p_extra_i_2, vPromoName, vNF_ServiceID, nRoamerStatus, 'POSTPAID', p_req_id, sysdate, user);               exception                  when dup_val_on_index then                     update conditioner_log                     set    status = 0, request_id = p_req_id                     where  tran_type = p_trantype                     and    msisdn = p_msisdn                     and    promo_code = p_extra_i_1                     and    promo_value = p_extra_i_2;                           end;               -- tag subscription as expired               update conditioner_log set status=4, remarks='voyager' where msisdn = p_msisdn and promo_code = p_extra_i_1 and promo_value = p_extra_i_2 and tran_type = 20;               commit;            elsif (p_trantype = 22) then               begin                  select to_char(dt_activated + to_number(replace(promo_value,'D','')),'YYYY-MM-DD HH24:MI:SS')                  into   vVYGR_exp                  from   conditioner_log                  where  msisdn = p_msisdn                  and    promo_code = p_extra_i_1                  and    promo_value = p_extra_i_2                  and    tran_type = 20                  and    status = 2                  and    brand = 'POSTPAID';                  p_extra_o_1 := vVYGR_exp;               exception                 when others then                    p_retr := -9999;                    sp_logger('INIT' , 'ERROR => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ' ERR:' || SQLCODE);                    return;               end;            end if;         end if;      else         if sf_check_roamer_status(p_msisdn) = 1 then            nRetr := 150;            nRoamerStatus := 0;         else            nRetr := 151;            nRoamerStatus := 3;         end if;         -- pre-activation         if nRetr = 151 then            if sf_check_usurf_status(p_msisdn, p_extra_i_1, p_extra_i_2, 0, 'PREPAID', 3) = 0 then               nRetr := 148;            else               if (p_trantype = 21) then                  delete from conditioner_log where msisdn = p_msisdn and promo_code = p_extra_i_1 and promo_value = p_extra_i_2 and tran_type = 20;                  commit;               end if;            end if;         elsif nRetr = 150  then            begin               sp_get_usurf_sid (vPromoName, vNF_ServiceID, p_extra_i_1, p_extra_i_2, 'PREPAID');               insert into conditioner_log (id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, request_id, dt_created, created_by)               values (conditioner_log_seq.nextval, p_trantype, 1, p_msisdn, p_extra_i_1, p_extra_i_2, vPromoName, vNF_ServiceID, nRoamerStatus, p_req_id, sysdate, user);            exception               when dup_val_on_index then                  update conditioner_log                  set    status = 0, request_id = p_req_id                  where  tran_type = p_trantype                  and    msisdn = p_msisdn                  and    promo_code = p_extra_i_1                  and    promo_value = p_extra_i_2;            end;            commit;         end if;      end if;      p_retr := nRetr;      sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) || ' p_msisdn:' || p_msisdn || ' p_req_id:' || to_char(p_req_id) || ' p_ref_id:' || to_char(p_ref_id) || ' p_retr:' || to_char(p_retr) || ' p_extra_o_1: ' || p_extra_o_1 || ', p_extra_o_2:' || p_extra_o_2 || ', p_extra_o_3:' || p_extra_o_3);      return;   end if;   --  9    TRAN_TYPE_GROAM_OFF,   if (p_trantype = 9) and (nRetr = 1) then      begin         update sim_activation         set    status='PENDING'         where  msisdn  = p_extra_i_1;      exception         when others then null;      end;   end if;   -- set return - minimun balance   if nMinBal is not null then      p_extra_o_1 := to_char(nMinBal);   else      p_extra_o_1 := '';   end if;   --if nDuration is not null then   --   p_extra_o_2 := to_char(nDuration);   --else      p_extra_o_2 := '';   --end if;   p_extra_o_3 := '';   -- 2  - TRAN_TYPE_REG   -- 4  - TRAN_TYPE_LINK   -- 8  - TRAN_TYPE_GROAM_ON   -- 9  - TRAN_TYPE_GROAM_OFF   -- 10 - TRAN_TYPE_GROAM_EXTEND   if (p_trantype in (2,4,8,9,10)) then      p_extra_o_3 := sf_is_sweden_nsn_range(p_msisdn);   end if;   p_retr      := nRetr;   sp_logger('INIT' , 'END => p_trantype :' || to_char(p_trantype) ||                      ' p_msisdn:'          || p_msisdn            ||                      ' p_retr:'            || to_char(p_retr)     ||                      ' p_extra_o_1: '      || p_extra_o_1         ||                      ' p_extra_o_2:'       || p_extra_o_2         ||                      ' p_extra_o_3:'       || p_extra_o_3);end sp_init_tran;/show err CREATE OR REPLACE PROCEDURE "TRIGGER_OWNER"."SP_GENERATE_GREENCARD_NOTIF" is  vDailyCtr   Number := 0;  vExpiryCtr  Number := 0;  v3D_Daily   Varchar2(1080);   v5D_Daily   Varchar2(1080);   v7D_Daily   Varchar2(1080);   v15D_Daily  Varchar2(1080);   v30D_Daily  Varchar2(1080);   v3D_Expiry  Varchar2(1080);   v5D_Expiry  Varchar2(1080);   v7D_Expiry  Varchar2(1080);   v15D_Expiry Varchar2(1080);   v30D_Expiry Varchar2(1080);   FUNCTION create_message (p_msisdn in varchar, p_message_id in varchar, p_message in varchar, p_expiry_date in varchar, p_expiry_time in varchar, p_brand in varchar) return number is  BEGIN     if p_message is not null then        begin           insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg, brand)           values (broadcast_log_seq.nextval, p_msisdn, p_message_id, trunc(sysdate), 0, 1, replace(replace(p_message, '[EXPIRY_DATE]', p_expiry_date), '[EXPIRY_TIME]', p_expiry_time), 'PREPAID');           return 1;        exception            when dup_val_on_index then return 0;        end;     end if;     return 0;  END;begin   dbms_output.put_line ('[' || to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS') || '] START conditioner notification');   -- set messages   select msg_1 into v3D_Daily from keyword_msg WHERE message_id='VROAM_SURF3D_DAILY_NOTIF';   select msg_1 into v5D_Daily from keyword_msg WHERE message_id='VROAM_SURF5D_DAILY_NOTIF';   select msg_1 into v7D_Daily from keyword_msg WHERE message_id='VROAM_SURF7D_DAILY_NOTIF';   select msg_1 into v15D_Daily from keyword_msg WHERE message_id='VROAM_SURF15D_DAILY_NOTIF';   select msg_1 into v30D_Daily from keyword_msg WHERE message_id='VROAM_SURF30D_DAILY_NOTIF';   vDailyCtr := 0;   -- 3Days Daily Notification   for i in (select msisdn, to_char(dt_activated + 3,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 3,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-3) and (dt_notif < sysdate)             and    (promo_value = '3D') and (promo_code = 'SURF') and (dt_notif < sysdate)             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID') )   loop      if create_message(i.msisdn, 'VROAM_SURF3D_DAILY_NOTIF', v3D_Daily, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set dt_notif = to_date(to_char(sysdate,'YYYYMMDD') || i.expiry_time, 'YYYYMMDD HH24:MI:SS')+1 where id = i.id;         commit;         vDailyCtr := vDailyCtr + 1;      end if;   end loop;   -- 5Days Daily Notification   for i in (select msisdn, to_char(dt_activated + 5,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 5,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-5) and (dt_notif < sysdate)             and    (promo_value = '5D') and (promo_code = 'SURF') and (dt_notif < sysdate)             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID') )   loop      if create_message(i.msisdn, 'VROAM_SURF5D_DAILY_NOTIF', v5D_Daily, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set dt_notif = to_date(to_char(sysdate,'YYYYMMDD') || i.expiry_time, 'YYYYMMDD HH24:MI:SS')+1 where id = i.id;         commit;         vDailyCtr := vDailyCtr + 1;      end if;   end loop;   -- 7Days Daily Notification   for i in (select msisdn, to_char(dt_activated + 7,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 7,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-7) and (dt_notif < sysdate)             and    (promo_value = '7D') and (promo_code = 'SURF') and (dt_notif < sysdate)             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID') )   loop      if create_message(i.msisdn, 'VROAM_SURF7D_DAILY_NOTIF', v7D_Daily, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set dt_notif = to_date(to_char(sysdate,'YYYYMMDD') || i.expiry_time, 'YYYYMMDD HH24:MI:SS')+1 where id = i.id;         commit;         vDailyCtr := vDailyCtr + 1;      end if;   end loop;   -- 15Days Daily Notification   for i in (select msisdn, to_char(dt_activated + 15,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 15,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-15) and (dt_notif < sysdate)             and    (promo_value = '15D') and (promo_code = 'SURF') and (dt_notif < sysdate)             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID') )   loop      if create_message(i.msisdn, 'VROAM_SURF15D_DAILY_NOTIF', v15D_Daily, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set dt_notif = to_date(to_char(sysdate,'YYYYMMDD') || i.expiry_time, 'YYYYMMDD HH24:MI:SS')+1 where id = i.id;         commit;         vDailyCtr := vDailyCtr + 1;      end if;   end loop;   -- 30Days Daily Notification   for i in (select msisdn, to_char(dt_activated + 30,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 30,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-29) and (dt_notif < sysdate)             and    (promo_value = '30D') and (promo_code = 'SURF') and (dt_notif < sysdate)             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID') )   loop      if create_message(i.msisdn, 'VROAM_SURF30D_DAILY_NOTIF', v30D_Daily, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set dt_notif = to_date(to_char(sysdate,'YYYYMMDD') || i.expiry_time, 'YYYYMMDD HH24:MI:SS')+1 where id = i.id;         commit;         vDailyCtr := vDailyCtr + 1;      end if;   end loop;   -- set expiry messages   select msg_1 into v3D_Expiry from keyword_msg WHERE message_id='VROAM_SURF3D_EXPIRY_NOTIF';   select msg_1 into v5D_Expiry from keyword_msg WHERE message_id='VROAM_SURF5D_EXPIRY_NOTIF';   select msg_1 into v7D_Expiry from keyword_msg WHERE message_id='VROAM_SURF7D_EXPIRY_NOTIF';   select msg_1 into v15D_Expiry from keyword_msg WHERE message_id='VROAM_SURF15D_EXPIRY_NOTIF';   select msg_1 into v30D_Expiry from keyword_msg WHERE message_id='VROAM_SURF30D_EXPIRY_NOTIF';   vExpiryCtr := 0;   -- 3D Expiry   for i in (select msisdn, to_char(dt_activated + 3,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 3,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-4) and (dt_activated  < sysdate-3)             and    (promo_value = '3D') and (promo_code = 'SURF')             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID') )   loop      if create_message(i.msisdn, 'VROAM_SURF3D_EXPIRY_NOTIF', v3D_Expiry, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set status=4 where id = i.id;         commit;         vExpiryCtr := vExpiryCtr + 1;      end if;   end loop;   -- 5D Expiry   for i in (select msisdn, to_char(dt_activated + 5,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 5,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-6) and (dt_activated  < sysdate-5)             and    (promo_value = '5D') and (promo_code = 'SURF')             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID'))   loop      if create_message(i.msisdn, 'VROAM_SURF5D_EXPIRY_NOTIF', v5D_Expiry, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set status=4 where id = i.id;         commit;         vExpiryCtr := vExpiryCtr + 1;      end if;   end loop;   -- 7D Expiry   for i in (select msisdn, to_char(dt_activated + 7,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 7,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-8) and (dt_activated  < sysdate-7)             and    (promo_value = '7D') and (promo_code = 'SURF')             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID'))   loop      if create_message(i.msisdn, 'VROAM_SURF7D_EXPIRY_NOTIF', v7D_Expiry, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set status=4 where id = i.id;         commit;         vExpiryCtr := vExpiryCtr + 1;      end if;   end loop;   -- 15D Expiry   for i in (select msisdn, to_char(dt_activated + 15,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 15,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-16) and (dt_activated  < sysdate-15)             and    (promo_value = '15D') and (promo_code = 'SURF')             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID'))   loop      if create_message(i.msisdn, 'VROAM_SURF15D_EXPIRY_NOTIF', v15D_Expiry, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set status=4 where id = i.id;         commit;         vExpiryCtr := vExpiryCtr + 1;      end if;   end loop;   -- 30D Expiry   for i in (select msisdn, to_char(dt_activated + 30,'DD-MON-YYYY') expiry_date, to_char(dt_activated + 30,'HH24:MI:SS') expiry_time, id             from   conditioner_log             where  (dt_activated  > sysdate-31) and (dt_activated  < sysdate-30)             and    (promo_value = '30D') and (promo_code = 'SURF')             and    (tran_type = 20) and (status = 2) and (brand = 'POSTPAID'))   loop      if create_message(i.msisdn, 'VROAM_SURF30D_EXPIRY_NOTIF', v30D_Expiry, i.expiry_date, i.expiry_time, 'POSTPAID') = 1 then         update conditioner_log set status=4 where id = i.id;         commit;         vExpiryCtr := vExpiryCtr + 1;      end if;   end loop;   --   -- tagging  for successfull opt-out (tran_type 21)   --    for i in (select msisdn, promo_code, promo_value, id             from   conditioner_log             where  (dt_activated  > sysdate-3) and (remarks is null)             and    (tran_type = 21) and (status = 2) and (brand = 'POSTPAID') )   loop      begin         update conditioner_log          set    status = 4, remarks='voyager'         where  promo_code = i.promo_code         and    promo_value = i.promo_value         and    msisdn = i.msisdn         and    tran_type = 20         and    status = 2;         if (SQL%FOUND) then            update conditioner_log set remarks='successful deactivation' where id = i.id;         else            update conditioner_log set remarks='no activation' where id = i.id;         end if;         commit;     exception          when dup_val_on_index then null;      end;      commit;   end loop;   dbms_output.put_line ('[' || to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS') || '] No. of Daily  : ' || to_char(vDailyCtr));   dbms_output.put_line ('[' || to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS') || '] No. of Expiry : ' || to_char(vExpiryCtr));   dbms_output.put_line ('[' || to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS') || '] END conditioner notification');end sp_generate_greencard_notif;/show errCREATE OR REPLACE PROCEDURE sp_greencard_expire_plan (p_retr out number, p_msisdn in varchar, p_soc_id in varchar) is   vPromoCode  conditioner_promos.promo_code%type;   vPromoValue conditioner_promos.promo_value%type;   nCtr Number := 0;BEGIN   -- check soc_id from voyager plans   begin      select promo_code, promo_value      into   vPromoCode, vPromoValue      from   conditioner_promos      where  soc_id = p_soc_id;   exception       when no_data_found then null;   end;   if vPromoCode is not null then      for i in (select id from conditioner_log                where  msisdn = p_msisdn and tran_type = 20 and status >=2                 and    promo_code = vPromoCode and promo_value = vPromoValue )      loop         begin            insert into conditioner_history (id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, request_id, brand, remarks, dt_notif, dt_created, created_by, dt_modified, deleted_by, dt_deleted)            select id, tran_type, cluster_node, msisdn, promo_code, promo_value, promo_name, service_id, status, request_id, brand, decode(remarks, null, 'mlp', remarks || ' -> mlp'), dt_notif, dt_created, created_by, dt_modified, user, sysdate            from   conditioner_log            where  id = i.id;            nCtr := nCtr + 1;         exception             when dup_val_on_index then                update conditioner_history               set    remarks = remarks || ' mlp [' || to_char(sysdate, 'YYYYMMDD HH24MISS') || ']'               where  id = i.id;         end;         delete from conditioner_log where id = i.id;         commit;      end loop;   end if;   if nCtr > 0 then      p_retr := 1;   else      p_retr := 0;   end if;   END sp_greencard_expire_plan;/show errCREATE OR REPLACE PROCEDURE "TRIGGER_OWNER"."SP_PROCESS_MLP" (  p_retr out number,  p_msisdn in varchar2,  p_transaction_code in varchar2,  p_transaction_id in varchar2,  p_bill_cycle in varchar2,  p_type in varchar2,  p_soc in varchar2,  p_effdate in varchar2 ) is  nRetr         number;  nUdrDays      mlp_services.num_days%type;  vServiceCyle  mlp_services.service_cycle%type;  vMsg_Start    mlp_messages.message%type;  nNextId       number;  dEffDate      date;  dExpiryNotif  date;  nGreencard    number := 0;begin   sp_logger('PROCESS_MLP' , 'START =>'              ||                             ' p_msisdn:'            || p_msisdn ||                             ' p_transaction_code:'  || p_transaction_code ||                             ' p_transaction_id:'    || p_transaction_id ||                             ' p_bill_cycle:'        || p_bill_cycle ||                             ' p_type:'              || p_type ||                             ' p_soc:'               || p_soc ||                             ' p_effdate:'           || p_effdate);   nRetr := 1;   begin      select to_date(replace(p_effdate,'T',' '), 'YYYY-MM-DD HH24:MI:SS') into dEffDate from dual;   exception     when others then         nRetr := 104;   end;   if p_type IN ('AddedServices', 'Services') then      if nRetr = 1 then         -- get udr days, service cycle         begin            select num_days, service_cycle            into   nUdrDays, vServiceCyle            from   mlp_services            where  soc_id = p_soc;         exception            when no_data_found then               nRetr := 102;         end;      end if;      if nRetr = 1 then         begin            select mlp_seq.nextval into nNextId from dual;            insert into mlp_log (                    id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, last_usage_dt, last_usage_tm,                    usage_expiry, cycle_no, transaction_id, transaction_code, remaining_days, dt_created, created_by)            values (nNextId, p_msisdn, p_soc, vServiceCyle, dEffDate, null, nUdrDays, null, null,                    null, p_bill_cycle, p_transaction_id, p_transaction_code, nUdrDays, sysdate, user );         exception            when dup_val_on_index then               nRetr := 101;         end;      end if;   elsif p_type = 'RemovedServices' then      if nRetr = 1 then         sp_greencard_expire_plan(nGreencard, p_msisdn,p_soc);         update mlp_log set expiry_date = dEffDate where msisdn=p_msisdn and soc_id = p_soc returning expiry_notif into dExpiryNotif;         if sql%notfound then            if nGreencard = 0 then               nRetr := 109;            end if;         else            if (dExpiryNotif is not null) and (dExpiryNotif > dEffDate) then               insert into mlp_log_history                      ( id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                       last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, dt_deleted, deleted_by )               select id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                      last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, sysdate, user               from   mlp_log               where  msisdn=p_msisdn and soc_id=p_soc;               delete from  mlp_log where msisdn=p_msisdn and soc_id=p_soc;            end if;         end if;      end if;   else      nRetr := 110;   end if;   sp_logger('PROCESS_MLP' , 'END => nRetr:' || nRetr );   p_retr := nRetr;   commit;end sp_process_mlp;/show errCREATE OR REPLACE TRIGGER "TRIGGER_OWNER"."CONDITIONER_LOG_INSERT_TRIGGER"before insert on conditioner_logfor each rowbegin   if SF_GET_CUSTOMER_TYPE(:new.msisdn) = 'TM' then      :new.brand := 'TM';   else      if :new.brand <> 'POSTPAID' then         :new.brand := 'PREPAID';      end if;   end if;end conditioner_log_insert_trigger;/show errCREATE OR REPLACE TRIGGER "TRIGGER_OWNER"."CONDITIONER_LOG_UPDATE_TRIGGER"before update on conditioner_logfor each rowbegin   if (:old.status <> 2) and (:new.status = 2) and (:new.tran_type=20) then      :new.dt_activated := sysdate;      :new.dt_notif := sysdate+1;   end if;end conditioner_log_update_trigger;/show errset define &                                                                                                                                                         