CREATE OR REPLACE PROCEDURE TRIGGER_OWNER.SP_PROCESS_MLP (  p_retr out number,  p_msisdn in varchar2,  p_transaction_code in varchar2,  p_transaction_id in varchar2,  p_bill_cycle in varchar2,  p_type in varchar2,  p_soc in varchar2,  p_effdate in varchar2 ) is  nRetr         number;  nUdrDays      mlp_services.num_days%type;  vServiceCyle  mlp_services.service_cycle%type;  vMsg_Start    mlp_messages.message%type;  nNextId       number;  dEffDate      date;  dExpiryNotif  date;begin   sp_logger('PROCESS_MLP' , 'START =>'              ||                             ' p_msisdn:'            || p_msisdn ||                             ' p_transaction_code:'  || p_transaction_code ||                             ' p_transaction_id:'    || p_transaction_id ||                             ' p_bill_cycle:'        || p_bill_cycle ||                             ' p_type:'              || p_type ||                             ' p_soc:'               || p_soc ||                             ' p_effdate:'           || p_effdate);   nRetr := 1;   begin      select to_date(replace(p_effdate,'T',' '), 'YYYY-MM-DD HH24:MI:SS') into dEffDate from dual;   exception     when others then          nRetr := 104;   end;   if p_type IN ('AddedServices', 'Services') then      if nRetr = 1 then         -- get udr days, service cycle         begin            select num_days, service_cycle            into   nUdrDays, vServiceCyle            from   mlp_services            where  soc_id = p_soc;         exception             when no_data_found then                nRetr := 102;         end;      end if;            if nRetr = 1 then         begin            select mlp_seq.nextval into nNextId from dual;            insert into mlp_log (                    id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, last_usage_dt, last_usage_tm,                    usage_expiry, cycle_no, transaction_id, transaction_code, remaining_days, dt_created, created_by)            values (nNextId, p_msisdn, p_soc, vServiceCyle, dEffDate, null, nUdrDays, null, null,                    null, p_bill_cycle, p_transaction_id, p_transaction_code, nUdrDays, sysdate, user );         exception             when dup_val_on_index then               nRetr := 101;         end;      end if;   elsif p_type = 'RemovedServices' then      if nRetr = 1 then         update mlp_log set expiry_date = dEffDate where msisdn=p_msisdn and soc_id = p_soc returning expiry_notif into dExpiryNotif;         if sql%notfound then            nRetr := 109;         else            if (dExpiryNotif is not null) and (dExpiryNotif > dEffDate) then               insert into mlp_log_history                       ( id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                       last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, dt_deleted, deleted_by )                select id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                      last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, sysdate, user               from   mlp_log               where  msisdn=p_msisdn and soc_id=p_soc;               delete from  mlp_log where msisdn=p_msisdn and soc_id=p_soc;            end if;         end if;      end if;   else      nRetr := 110;   end if;   sp_logger('PROCESS_MLP' , 'END => nRetr:' || nRetr );   p_retr := nRetr;   commit;end sp_process_mlp;/show errCREATE OR REPLACE FUNCTION TRIGGER_OWNER.IS_MLP_FILTERED (p_msisdn in number, p_trandate in date, p_mcc in varchar2, p_mnc in varchar2) return number is  dLastUsage Date;  dExpiryDate Date;  dCycleMonth Date;  dStart Date;  nRemDays Number;  nNumDays Number;  nCycleDay Number;  nRetr Number;  vSocId Varchar2(60);  vSvcCycle Varchar2(60);  vCycleNo Varchar2(30);  vPartner Varchar2(120);  vMsg_Start Varchar2(2000);  -- returns 0 no mlp subscription  -- returns 111 with mlp subscriptionbegin   sp_logger('IS_MLP_FILTERED' , 'START =>' ||                                 ' p_msisdn   :' || p_msisdn ||                                   ' p_trandate :' || p_trandate ||                                 ' p_mcc   :' || p_mcc ||                                   ' p_mnc :' || p_mnc);   nRetr := 111;   select nvl(a.usage_expiry,a.start_date), a.remaining_days, a.expiry_date,           a.soc_id, a.num_days, a.start_date, b.service_cycle, a.cycle_no   into   dLastUsage, nRemDays, dExpiryDate, vSocId, nNumDays, dStart, vSvcCycle, vCycleNo   from   mlp_log a, mlp_services b   where  a.msisdn = p_msisdn   and    a.start_date < sysdate   and    rownum < 2;   begin      select provider_name      into   vPartner      from   mlp_partners      where  mcc = p_mcc      and    mnc = p_mnc      and    rownum < 2;   exception      when no_data_found then vPartner := '<PARTNER>';      when too_many_rows then vPartner := '<PARTNER>';   end;   dbms_output.put_line('Start Debug:');   dbms_output.put_line('vSvcCycle:' || vSvcCycle || ' vCycleNo:' || vCycleNo || ' dStart:' || to_char(dStart));   -- start: check service cycle   if (vSvcCycle = 'MONTHLY') then      begin         select cycle_day         into   nCycleDay         from   mlp_service_cycles         where  cycle_no = vCycleNo;      exception         when no_data_found then nCycleDay := to_number(to_char(dStart, 'DD'));      end;            dbms_output.put_line('nCycleDay:' || nCycleDay || ' sysdate dd:' || to_char(sysdate,'DD'));      if nCycleDay >= to_number(to_char(sysdate,'DD')) then         dCycleMonth := add_months(to_date(to_char(sysdate,'YYYYMM') || rtrim(to_char(nCycleDay, '09')), 'YYYYMMDD'), -1);      else         dCycleMonth := to_date(to_char(sysdate,'YYYYMM') || rtrim(to_char(nCycleDay, '09')), 'YYYYMMDD');      end if;      if (dCycleMonth > dLastUsage) then         nRemDays := nNumDays;      end if;   end if;   -- end: check service cycle   dbms_output.put_line('nRemDays:' || to_char(nRemDays) || ' dLastUsage:' || to_char(dLastUsage) || ' dCycleMonth:' || to_char(dCycleMonth) || ' p_trandate:' || to_char(p_trandate));   if (nRemDays = 0) and (dLastUsage < p_trandate) then      nRetr := 0;   elsif (nRemDays > 0) and (dLastUsage < p_trandate) then      if ((nRemDays-1) = 0) and (vSvcCycle = 'NONE') then         update mlp_log         set    remaining_days = 0,                last_usage_dt = trunc(p_trandate),                last_usage_tm = p_trandate,                usage_expiry = p_trandate+1,                expiry_date = p_trandate+1,                pre_expiry_notif = null,                expiry_notif = null,                mnc = p_mnc,                mcc = p_mcc         where  msisdn = p_msisdn         and    soc_id = vSocId;      else         update mlp_log         set    remaining_days = nRemDays - 1,                last_usage_dt = trunc(p_trandate),                last_usage_tm = p_trandate,                usage_expiry = p_trandate+1,                pre_expiry_notif = null,                expiry_notif = null,                mnc = p_mnc,                mcc = p_mcc         where  msisdn = p_msisdn;      end if;      begin         select replace(replace(message, '<REMDAYS>', nRemDays-1), '<PARTNER>', vPartner)         into vMsg_Start         from mlp_messages         where soc_id = vSocId         and   message_type = 'ACTIVATION';      exception          when no_data_found then nRetr := 112;      end;      if vMsg_Start is not null then         begin            insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg)            values (broadcast_log_seq.nextval, p_msisdn, '3', trunc(sysdate), 0, 1, vMsg_Start);         exception             when dup_val_on_index then nRetr := 111;         end;      end if;      commit;   end if;   sp_logger('IS_MLP_FILTERED' , 'END =>' ||                                 ' p_msisdn   :' || p_msisdn   ||                                   ' p_trandate :' || p_trandate ||                                   ' vMsg_Start :' ||  vMsg_Start ||                                   ' nRetr      :' ||  nRetr);   return nRetr;exception   when no_data_found then      sp_logger('IS_MLP_FILTERED' , 'END => WNDF ' ||                                    ' p_msisdn   :' || p_msisdn   ||                                      ' p_trandate :' || p_trandate ||                                      ' vMsg_Start :' ||  vMsg_Start ||                                      ' nRetr      :' ||  nRetr);      return 0;   when others then       sp_logger('IS_MLP_FILTERED' , 'END => WOT ' ||                                    ' p_msisdn   :' || p_msisdn   ||                                      ' p_trandate :' || p_trandate ||                                      ' vMsg_Start :' ||  vMsg_Start ||                                      ' nRetr      :' ||  nRetr);      return 0;end is_mlp_filtered;/show errCREATE OR REPLACE PROCEDURE TRIGGER_OWNER.SP_GENERATE_MLP_NOTIFICATIONS is  vMsg_Start    Varchar2(2000);  vPartner      Varchar2(120);  vPreCounter   Number := 0;  vExpCounter   Number := 0;begin   for i in (select msisdn, soc_id, usage_expiry, mcc, mnc, remaining_days             from   mlp_log             where  status ='ACTIVE'             and    usage_expiry <= sysdate-(3/24)              and    pre_expiry_notif is null              and    expiry_notif is null             order by soc_id)   loop      -- Send pre-expiry message if expiry is within 30minutes before it expires       if sysdate < i.usage_expiry-(30/60/24) then         begin            select provider_name            into   vPartner            from   mlp_partners            where  mcc = i.mcc            and    mnc = i.mnc            and    rownum < 2;         exception            when no_data_found then vPartner := '<PARTNER>';            when too_many_rows then vPartner := '<PARTNER>';         end;                  begin            select replace(replace(replace(message, '<ENDTIME>', to_char(i.usage_expiry,'DD-MON-YYYY HH24:MI:SS')), '<PARTNER>', vPartner), '<REMDAYS>', i.remaining_days)            into vMsg_Start            from mlp_messages            where soc_id = i.soc_id            and   message_type = 'PRE-EXPIRY';         exception             when no_data_found then null;         end;         begin            if vMsg_Start is not null then               begin                  insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg)                  values (broadcast_log_seq.nextval, i.msisdn, '2', trunc(sysdate), 0, 1, vMsg_Start);                  vPreCounter := vPreCounter + 1;               exception                   when dup_val_on_index then null;               end;            end if;         exception            when dup_val_on_index then null;         end;      end if;      update mlp_log set pre_expiry_notif = sysdate where msisdn=i.msisdn and soc_id=i.soc_id;      commit;   end loop;   for i in (select msisdn, soc_id, usage_expiry, mcc, mnc, remaining_days, expiry_date             from   mlp_log             where  status ='ACTIVE'             and    usage_expiry <= sysdate              and    expiry_notif is null              order by soc_id)   loop      begin         select provider_name         into   vPartner         from   mlp_partners         where  mcc = i.mcc         and    mnc = i.mnc         and    rownum < 2;      exception         when no_data_found then vPartner := '<PARTNER>';         when too_many_rows then vPartner := '<PARTNER>';      end;      -- Send expiry message if expiry is within 1hour after it expires      if sysdate < (i.usage_expiry+(1/24)) then         begin            select replace(replace(replace(message, '<ENDTIME>', to_char(i.usage_expiry,'DD-MON-YYYY HH24:MI:SS')), '<PARTNER>', vPartner), '<REMDAYS>', i.remaining_days)            into vMsg_Start            from mlp_messages            where soc_id = i.soc_id            and   message_type = 'EXPIRY';         exception             when no_data_found then null;         end;         begin            if vMsg_Start is not null then               begin                  insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg)                  values (broadcast_log_seq.nextval, i.msisdn, '3', trunc(sysdate), 0, 1, vMsg_Start);                  vExpCounter := vExpCounter + 1;               exception                   when dup_val_on_index then null;               end;            end if;         exception            when dup_val_on_index then null;         end;      end if;      update mlp_log set expiry_notif = sysdate where msisdn=i.msisdn and soc_id=i.soc_id;      if i.expiry_date is not null then         insert into mlp_log_history                 ( id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                 last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, dt_deleted, deleted_by )          select id, msisdn, soc_id, service_cycle, start_date, expiry_date, num_days, cycle_no, transaction_id, transaction_code, mnc, mcc, usage_expiry,                last_usage_dt, last_usage_tm, remaining_days, pre_expiry_notif, expiry_notif, status, dt_created, created_by, sysdate, user         from   mlp_log         where  msisdn=i.msisdn and soc_id=i.soc_id;         if sql%found then            delete from  mlp_log where msisdn=i.msisdn and soc_id=i.soc_id;         end if;      end if;      commit;   end loop;   dbms_output.put_line (chr(10));   dbms_output.put_line (to_char(sysdate, 'YYYY-MM-DD HH24:MI:SS'));   dbms_output.put_line ('No. of Pre Expiry Message Sent:' || to_char(vPreCounter));   dbms_output.put_line ('No. of Expiry Message Sent:' || to_char(vExpCounter));end sp_generate_mlp_notifications;/show errCREATE OR REPLACE PROCEDURE TRIGGER_OWNER.SP_PROCESS_DEFAULT_UNLI (  p_retr     out number,  p_sta_dt   out varchar2,  p_end_dt   out varchar2,  p_msisdn   in varchar2,  p_mnc      in varchar2,  p_mcc      in varchar2,  p_sgsn_ip  in varchar2,  p_date     in varchar2,  p_filename in varchar2 ) is  -- 1   - Valid Transaction  -- 101 - Invalid MSISDN  -- 102 - Invalid MNC  -- 103 - Invalid MCC  -- 104 - Invalid SGSN_IP  -- 105 - invalid DATE  -- 106 - invalid FILENAME  -- 107 - Duplicate / With Active Default Unli  -- 108 - Unable to insert notification message  -- 109 - Postpaid filtered - chia filtered  -- 110 - Invalid TZ  -- 111 - MLP subscriber  -- 112 - MLP subscriber no activation message  -- 113 - Shampoo suppression  vMsg_1st    Varchar2(2000);  vMsg_Swi    Varchar2(2000);  vMcc        Varchar2(30);  nRetr       Number;  vPartner    Number;  vTranDate   Date;  vTranDateTZ Date;  nPreExpiry  Number;  nExpiry     Number;  dExpiry     Date;  vUnliFlag   Number;  vTZ         Number;  nNextId     Number;  nMLP        Number;  nShampoo    Number;begin  sp_logger('PROCESS_DEFAULT_UNLI' , 'START =>' ||                                     ' p_msisdn    :' || p_msisdn    ||                                       ' p_mnc       :' || p_mnc       ||                                     ' p_mcc       :' || p_mcc       ||                                     ' p_sgsn_ip   :' || p_sgsn_ip   ||                                     ' p_date      :' || p_date      ||                                     ' p_filename  :' || p_filename );  nRetr := 1;  if  p_msisdn is null then nRetr := 101;  elsif substr(p_msisdn,1,2) <> '63' then nRetr := 101;  elsif length(p_msisdn) <> 12 then nRetr := 101;  elsif p_mnc is null then nRetr := 102;  elsif p_mcc is null then nRetr := 103;  elsif p_sgsn_ip is null then nRetr := 104;  elsif p_date is null then nRetr := 105;  elsif p_filename is null then nRetr := 106;  end if;  begin     select to_date(substr(p_date, 1, 10) || ' ' || substr(p_date, 12, 8), 'YYYY/MM/DD HH24:MI:SS') into vTranDate from dual;  exception     when others then        nRetr := 105;  end;  if is_chia_filtered(to_number(p_msisdn)) =  1 then     nRetr := 109;  end if;  nShampoo := is_shampoo_filtered(p_msisdn);  if nShampoo <> 0 then     nRetr := nShampoo;  end if;  nMLP := is_mlp_filtered(p_msisdn, vTranDate, p_mcc, p_mnc);  if nMLP <> 0 then     nRetr := nMLP;  end if;  -- check mnc  begin     select 1, to_number(tz) into vPartner, vTZ     from roaming_partners     where mcc = p_mcc     and   mnc = p_mnc;  exception     when no_data_found then        vPartner := 0;     when invalid_number then        nRetr := 110;  end;  -- check mcc  if vPartner = 1 then    begin       select msg       into vMsg_1st       from mcc_messages       where mcc = p_mcc       and   message_type = '1';    exception       when no_data_found then          nRetr := 103;    end;  else    begin       select msg       into vMsg_Swi       from mcc_messages       where mcc = p_mcc       and   message_type = '2';    exception       when no_data_found then          nRetr := 103;    end;  end if;  if nRetr = 1 then     if vMsg_Swi is not null then        UPDATE default_unli_log SET status=0 WHERE msisdn = p_msisdn AND mcc = p_mcc AND status >= 1;        -- UPDATE default_unli_exp SET status=0 WHERE msisdn = p_msisdn AND mcc = p_mcc AND status >= 1;        begin           insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg)           values (broadcast_log_seq.nextval, p_msisdn, '2', vTranDate, 0, 1, vMsg_Swi);        exception           when dup_val_on_index then              nRetr := 108;        end;     else        begin           select param_num1_value, param_num2_value           into   nPreExpiry, nExpiry           from   default_unli_params           where  param_id = 'UNLI_PRE_EXP';        exception           when others then              nPreExpiry := (11.5/24);              nExpiry := (12/24);        end;        begin           -- Radcom is UTC+0           --vTranDateTZ :=  vTranDate + sf_get_unli_tz(8,vTz);           vTranDateTZ :=  vTranDate + sf_get_unli_tz(8,0);           select default_unli_seq.nextval into nNextId from dual;           insert into default_unli_log (                   id, msisdn, mnc, mcc, sgsn_ip, tran_dt, tran_tm, dt_created,                   status, file_name, expiry_date)           values (nNextId, p_msisdn, p_mnc, p_mcc, p_sgsn_ip,                   trunc(vTranDateTZ), vTranDateTZ, sysdate,                   1, p_filename, vTranDateTZ+nExpiry );           insert into default_unli_exp (                   id, msisdn, tran_dt, tran_tm, mcc, mnc, status, original_dt,                   pre_expiry_dt, pre_expiry_tm, expiry_dt, expiry_tm )           values (nNextId, p_msisdn, trunc(vTranDateTZ), vTranDateTZ, p_mcc, p_mnc, 1, vTranDate,                   trunc(vTranDateTZ+nPreExpiry), vTranDateTZ+nPreExpiry,                   trunc(vTranDateTZ+nExpiry), vTranDateTZ+nExpiry);        exception           when dup_val_on_index then              SELECT expiry_date, status, id              INTO   dExpiry, vUnliFlag, nNextId              FROM   default_unli_log              WHERE  msisdn = p_msisdn              AND    mcc = p_mcc;              if (dExpiry < vTranDateTZ) then                 UPDATE default_unli_log                 SET    mnc = p_mnc,                        sgsn_ip = p_sgsn_ip,                        tran_dt = trunc(vTranDateTZ),                        tran_tm = vTranDateTZ,                        expiry_date = vTranDateTZ+nExpiry,                        status=1,                        file_name = p_filename                 WHERE  msisdn = p_msisdn                 AND    mcc = p_mcc;                 UPDATE default_unli_exp                 SET    mnc = p_mnc,                        tran_dt = trunc(vTranDateTZ),                        tran_tm = vTranDateTZ,                        pre_expiry_dt = trunc(vTranDateTZ+nPreExpiry),                        pre_expiry_tm = vTranDateTZ+nPreExpiry,                        expiry_dt = trunc(vTranDateTZ+nExpiry),                        expiry_tm = vTranDateTZ+nExpiry,                        original_dt = vTranDate,                        status=1                 WHERE  msisdn = p_msisdn                 AND    mcc = p_mcc;                 nRetr := 1;              elsif (vUnliFlag=0) then                 UPDATE default_unli_log SET status=1 WHERE msisdn = p_msisdn AND mcc = p_mcc;                 -- UPDATE default_unli_exp SET status=1 WHERE msisdn = p_msisdn AND mcc = p_mcc;                 -- no notification should be received as per email dated Apr 25 with subject Notification Issue                 -- nRetr := 1;                 nRetr := 107;              else                 nRetr := 107;              end if;        end;        if (vMsg_1st is not null) and (nRetr = 1) then           begin              insert into broadcast_log (id, msisdn, message_id, tx_date, status, cluster_node, msg)              values (broadcast_log_seq.nextval, p_msisdn, '1', sysdate, 0, 1, vMsg_1st);           exception              when dup_val_on_index then                 nRetr := 108;           end;        end if;     end if;     commit;  end if;  -- track files uploaded  if nRetr = 1 then     update radcom_downloaded_files     set    no_valid = no_valid + 1     where  file_name = p_filename;     if sql%notfound then        begin           insert into radcom_downloaded_files (id, file_name, no_valid, no_errors, dt_uploaded )           values (radcom_downloaded_files_seq.nextval, p_filename, 1, 0, sysdate);        exception           when dup_val_on_index then null;        end;     end if;     commit;  else     update radcom_downloaded_files     set    no_errors = no_errors + 1     where  file_name = p_filename;     if sql%notfound then        begin           insert into radcom_downloaded_files (id, file_name, no_valid, no_errors, dt_uploaded )           values (radcom_downloaded_files_seq.nextval, p_filename, 0, 1, sysdate);        exception           when dup_val_on_index then null;        end;     end if;     commit;  end if;  sp_logger('PROCESS_DEFAULT_UNLI' , 'END =>' ||                                     ' p_msisdn    :' || p_msisdn    ||                                       ' p_mnc       :' || p_mnc       ||                                     ' p_mcc       :' || p_mcc       ||                                     ' nRetr       :' || nRetr );  -- set return parameters  p_sta_dt := to_char(vTranDate, 'YYYY-MM-DD"T"HH24:MI:SS".000+0800"');  p_end_dt := to_char(vTranDate+nExpiry, 'YYYY-MM-DD"T"HH24:MI:SS".000+0800"');  p_retr := nvl(nRetr,0);end sp_process_default_unli;/show err